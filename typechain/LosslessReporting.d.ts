/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LosslessReportingInterface extends ethers.utils.Interface {
  functions: {
    "HUNDRED()": FunctionFragment;
    "committeeReward()": FunctionFragment;
    "getReportInfo(uint256)": FunctionFragment;
    "getRewards()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "losslessController()": FunctionFragment;
    "losslessGovernance()": FunctionFragment;
    "losslessReward()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "report(address,address)": FunctionFragment;
    "reportCount()": FunctionFragment;
    "reportLifetime()": FunctionFragment;
    "reporterClaim(uint256)": FunctionFragment;
    "reporterClaimableAmount(uint256)": FunctionFragment;
    "reporterReward()": FunctionFragment;
    "reportingAmount()": FunctionFragment;
    "retrieveCompensation(address,uint256)": FunctionFragment;
    "secondReport(uint256,address)": FunctionFragment;
    "setCommitteeReward(uint256)": FunctionFragment;
    "setLosslessGovernance(address)": FunctionFragment;
    "setLosslessReward(uint256)": FunctionFragment;
    "setReportLifetime(uint256)": FunctionFragment;
    "setReporterReward(uint256)": FunctionFragment;
    "setReportingAmount(uint256)": FunctionFragment;
    "setStakersReward(uint256)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stakersReward()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "HUNDRED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "committeeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "losslessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportLifetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reporterClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reporterClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reporterReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveCompensation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "secondReport",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitteeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportLifetime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReporterReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakersReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "HUNDRED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "committeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "losslessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommitteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReporterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakersReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CompensationRetrieve(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewCommitteeReward(uint256)": EventFragment;
    "NewGovernanceContract(address)": EventFragment;
    "NewLosslessReward(uint256)": EventFragment;
    "NewReportLifetime(uint256)": EventFragment;
    "NewReporterReward(uint256)": EventFragment;
    "NewReportingAmount(uint256)": EventFragment;
    "NewStakersReward(uint256)": EventFragment;
    "NewStakingToken(address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReportSubmission(address,address,uint256)": EventFragment;
    "ReporterClaim(address,uint256,uint256)": EventFragment;
    "SecondReportSubmission(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompensationRetrieve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCommitteeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernanceContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLosslessReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportLifetime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReporterReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportingAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakersReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReporterClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecondReportSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type CompensationRetrieveEvent = TypedEvent<
  [string, BigNumber] & { _adr: string; _amount: BigNumber }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type NewCommitteeRewardEvent = TypedEvent<
  [BigNumber] & { _newValue: BigNumber }
>;

export type NewGovernanceContractEvent = TypedEvent<
  [string] & { _adr: string }
>;

export type NewLosslessRewardEvent = TypedEvent<
  [BigNumber] & { _newValue: BigNumber }
>;

export type NewReportLifetimeEvent = TypedEvent<
  [BigNumber] & { _newValue: BigNumber }
>;

export type NewReporterRewardEvent = TypedEvent<
  [BigNumber] & { _newValue: BigNumber }
>;

export type NewReportingAmountEvent = TypedEvent<
  [BigNumber] & { _newAmount: BigNumber }
>;

export type NewStakersRewardEvent = TypedEvent<
  [BigNumber] & { _newValue: BigNumber }
>;

export type NewStakingTokenEvent = TypedEvent<[string] & { _token: string }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ReportSubmissionEvent = TypedEvent<
  [string, string, BigNumber] & {
    _token: string;
    _account: string;
    _reportId: BigNumber;
  }
>;

export type ReporterClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _reporter: string;
    _reportId: BigNumber;
    _amount: BigNumber;
  }
>;

export type SecondReportSubmissionEvent = TypedEvent<
  [string, string, BigNumber] & {
    _token: string;
    _account: string;
    _reportId: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class LosslessReporting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LosslessReportingInterface;

  functions: {
    HUNDRED(overrides?: CallOverrides): Promise<[BigNumber]>;

    committeeReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReportInfo(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, boolean] & {
        reporter: string;
        reportedAddress: string;
        secondReportedAddress: string;
        reportTimestamps: BigNumber;
        reportTokens: string;
        secondReports: boolean;
        reporterClaimStatus: boolean;
      }
    >;

    getRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reporter: BigNumber;
        _lossless: BigNumber;
        _committee: BigNumber;
        _stakers: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _losslessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    losslessController(overrides?: CallOverrides): Promise<[string]>;

    losslessGovernance(overrides?: CallOverrides): Promise<[string]>;

    losslessReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    report(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    reportLifetime(overrides?: CallOverrides): Promise<[BigNumber]>;

    reporterClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reporterClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reporterReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    reportingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieveCompensation(
      _adr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondReport(
      _reportId: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommitteeReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLosslessReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportLifetime(
      _lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReporterReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportingAmount(
      _reportingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakersReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakersReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

  committeeReward(overrides?: CallOverrides): Promise<BigNumber>;

  getReportInfo(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, boolean, boolean] & {
      reporter: string;
      reportedAddress: string;
      secondReportedAddress: string;
      reportTimestamps: BigNumber;
      reportTokens: string;
      secondReports: boolean;
      reporterClaimStatus: boolean;
    }
  >;

  getRewards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _reporter: BigNumber;
      _lossless: BigNumber;
      _committee: BigNumber;
      _stakers: BigNumber;
    }
  >;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _losslessController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  losslessController(overrides?: CallOverrides): Promise<string>;

  losslessGovernance(overrides?: CallOverrides): Promise<string>;

  losslessReward(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  report(
    _token: string,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportCount(overrides?: CallOverrides): Promise<BigNumber>;

  reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

  reporterClaim(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reporterClaimableAmount(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reporterReward(overrides?: CallOverrides): Promise<BigNumber>;

  reportingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  retrieveCompensation(
    _adr: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondReport(
    _reportId: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommitteeReward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLosslessGovernance(
    _losslessGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLosslessReward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportLifetime(
    _lifetime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReporterReward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportingAmount(
    _reportingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakersReward(
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakersReward(overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

    committeeReward(overrides?: CallOverrides): Promise<BigNumber>;

    getReportInfo(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, boolean] & {
        reporter: string;
        reportedAddress: string;
        secondReportedAddress: string;
        reportTimestamps: BigNumber;
        reportTokens: string;
        secondReports: boolean;
        reporterClaimStatus: boolean;
      }
    >;

    getRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reporter: BigNumber;
        _lossless: BigNumber;
        _committee: BigNumber;
        _stakers: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _losslessController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    losslessController(overrides?: CallOverrides): Promise<string>;

    losslessGovernance(overrides?: CallOverrides): Promise<string>;

    losslessReward(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    report(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    reporterClaim(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reporterClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reporterReward(overrides?: CallOverrides): Promise<BigNumber>;

    reportingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveCompensation(
      _adr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    secondReport(
      _reportId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommitteeReward(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLosslessReward(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportLifetime(
      _lifetime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReporterReward(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportingAmount(
      _reportingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakersReward(
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakersReward(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CompensationRetrieve(address,uint256)"(
      _adr?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _adr: string; _amount: BigNumber }
    >;

    CompensationRetrieve(
      _adr?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _adr: string; _amount: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "NewCommitteeReward(uint256)"(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    NewCommitteeReward(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    "NewGovernanceContract(address)"(
      _adr?: string | null
    ): TypedEventFilter<[string], { _adr: string }>;

    NewGovernanceContract(
      _adr?: string | null
    ): TypedEventFilter<[string], { _adr: string }>;

    "NewLosslessReward(uint256)"(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    NewLosslessReward(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    "NewReportLifetime(uint256)"(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    NewReportLifetime(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    "NewReporterReward(uint256)"(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    NewReporterReward(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    "NewReportingAmount(uint256)"(
      _newAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newAmount: BigNumber }>;

    NewReportingAmount(
      _newAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newAmount: BigNumber }>;

    "NewStakersReward(uint256)"(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    NewStakersReward(
      _newValue?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newValue: BigNumber }>;

    "NewStakingToken(address)"(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    NewStakingToken(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ReportSubmission(address,address,uint256)"(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    ReportSubmission(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    "ReporterClaim(address,uint256,uint256)"(
      _reporter?: string | null,
      _reportId?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _reporter: string; _reportId: BigNumber; _amount: BigNumber }
    >;

    ReporterClaim(
      _reporter?: string | null,
      _reportId?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _reporter: string; _reportId: BigNumber; _amount: BigNumber }
    >;

    "SecondReportSubmission(address,address,uint256)"(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    SecondReportSubmission(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    HUNDRED(overrides?: CallOverrides): Promise<BigNumber>;

    committeeReward(overrides?: CallOverrides): Promise<BigNumber>;

    getReportInfo(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _losslessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    losslessController(overrides?: CallOverrides): Promise<BigNumber>;

    losslessGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    losslessReward(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    report(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    reporterClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reporterClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reporterReward(overrides?: CallOverrides): Promise<BigNumber>;

    reportingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveCompensation(
      _adr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondReport(
      _reportId: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommitteeReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLosslessReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportLifetime(
      _lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReporterReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportingAmount(
      _reportingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakersReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakersReward(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNDRED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    committeeReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReportInfo(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _losslessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    losslessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    report(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportLifetime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reporterClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reporterClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reporterReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveCompensation(
      _adr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondReport(
      _reportId: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommitteeReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLosslessReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportLifetime(
      _lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReporterReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportingAmount(
      _reportingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakersReward(
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakersReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
