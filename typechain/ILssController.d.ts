/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILssControllerInterface extends ethers.utils.Interface {
  functions: {
    "activateEmergency(address)": FunctionFragment;
    "addToBlacklist(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "afterTransfer(address,address,uint256)": FunctionFragment;
    "beforeApprove(address,address,uint256)": FunctionFragment;
    "beforeBurn(address,uint256)": FunctionFragment;
    "beforeDecreaseAllowance(address,address,uint256)": FunctionFragment;
    "beforeIncreaseAllowance(address,address,uint256)": FunctionFragment;
    "beforeMint(address,uint256)": FunctionFragment;
    "beforeTransfer(address,address,uint256)": FunctionFragment;
    "beforeTransferFrom(address,address,address,uint256)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "deactivateEmergency(address)": FunctionFragment;
    "dexList(address)": FunctionFragment;
    "dexTranferThreshold()": FunctionFragment;
    "executeNewSettlementPeriod(address)": FunctionFragment;
    "extraordinaryRetrieval(address,address[],uint256)": FunctionFragment;
    "extraordinaryRetrievalProposalPeriod()": FunctionFragment;
    "guardian()": FunctionFragment;
    "losslessGovernance()": FunctionFragment;
    "losslessReporting()": FunctionFragment;
    "losslessStaking()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseAdmin()": FunctionFragment;
    "proposeNewSettlementPeriod(address,uint256)": FunctionFragment;
    "recoveryAdmin()": FunctionFragment;
    "removeProtectedAddress(address,address)": FunctionFragment;
    "resolvedNegatively(address)": FunctionFragment;
    "retrieveBlacklistedFunds(address[],address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDexList(address[],bool)": FunctionFragment;
    "setDexTransferThreshold(uint256)": FunctionFragment;
    "setExtraordinaryRetrievalPeriod(uint256)": FunctionFragment;
    "setGovernanceContractAddress(address)": FunctionFragment;
    "setGuardian(address)": FunctionFragment;
    "setPauseAdmin(address)": FunctionFragment;
    "setProtectedAddress(address,address,address)": FunctionFragment;
    "setRecoveryAdmin(address)": FunctionFragment;
    "setReportingContractAddress(address)": FunctionFragment;
    "setSettlementTimeLock(uint256)": FunctionFragment;
    "setStakingContractAddress(address)": FunctionFragment;
    "setTokenBurnLimit(address,uint256)": FunctionFragment;
    "setTokenBurnPeriod(address,uint256)": FunctionFragment;
    "setTokenMintLimit(address,uint256)": FunctionFragment;
    "setTokenMintPeriod(address,uint256)": FunctionFragment;
    "setWhitelist(address[],bool)": FunctionFragment;
    "settlementTimeLock()": FunctionFragment;
    "unpause()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activateEmergency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "afterTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeBurn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDecreaseAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeIncreaseAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTransferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergency",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dexList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dexTranferThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeNewSettlementPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "extraordinaryRetrieval",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extraordinaryRetrievalProposalPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "losslessGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReporting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewSettlementPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedNegatively",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveBlacklistedFunds",
    values: [string[], string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDexList",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexTransferThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraordinaryRetrievalPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPauseAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedAddress",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementTimeLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBurnLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBurnPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMintPeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementTimeLock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "activateEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeDecreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeIncreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexTranferThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeNewSettlementPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraordinaryRetrieval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraordinaryRetrievalProposalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "losslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewSettlementPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolvedNegatively",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveBlacklistedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDexList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDexTransferThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraordinaryRetrievalPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBurnLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBurnPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMintPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "AccountBlacklistRemoval(address)": EventFragment;
    "AdminChange(address)": EventFragment;
    "DexRemoval(address)": EventFragment;
    "EmergencyActive(address)": EventFragment;
    "EmergencyDeactivation(address)": EventFragment;
    "GuardianSet(address,address)": EventFragment;
    "NewBlacklistedAddress(address)": EventFragment;
    "NewBurn(address,address,uint256)": EventFragment;
    "NewBurnLimit(address,uint256)": EventFragment;
    "NewBurnPeriod(address,uint256)": EventFragment;
    "NewDex(address)": EventFragment;
    "NewDexThreshold(uint256)": EventFragment;
    "NewExtraordinaryPeriod(uint256)": EventFragment;
    "NewGovernanceContract(address)": EventFragment;
    "NewMint(address,address,uint256)": EventFragment;
    "NewMintLimit(address,uint256)": EventFragment;
    "NewMintPeriod(address,uint256)": EventFragment;
    "NewProtectedAddress(address,address,address)": EventFragment;
    "NewReportingContract(address)": EventFragment;
    "NewSettlementPeriodProposal(address,uint256)": EventFragment;
    "NewSettlementTimelock(uint256)": EventFragment;
    "NewStakingContract(address)": EventFragment;
    "NewWhitelistedAddress(address)": EventFragment;
    "PauseAdminChange(address)": EventFragment;
    "RecoveryAdminChange(address)": EventFragment;
    "RemovedProtectedAddress(address,address)": EventFragment;
    "SettlementPeriodChange(address,uint256)": EventFragment;
    "WhitelistedAddressRemoval(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBlacklistRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyDeactivation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBlacklistedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBurnLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBurnPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDexThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExtraordinaryPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernanceContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMintLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMintPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProtectedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportingContract"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewSettlementPeriodProposal"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSettlementTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWhitelistedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseAdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedProtectedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementPeriodChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressRemoval"): EventFragment;
}

export type AccountBlacklistRemovalEvent = TypedEvent<
  [string] & { _adr: string }
>;

export type AdminChangeEvent = TypedEvent<[string] & { _newAdmin: string }>;

export type DexRemovalEvent = TypedEvent<[string] & { _dexAddress: string }>;

export type EmergencyActiveEvent = TypedEvent<[string] & { _token: string }>;

export type EmergencyDeactivationEvent = TypedEvent<
  [string] & { _token: string }
>;

export type GuardianSetEvent = TypedEvent<
  [string, string] & { _oldGuardian: string; _newGuardian: string }
>;

export type NewBlacklistedAddressEvent = TypedEvent<
  [string] & { _blacklistedAddres: string }
>;

export type NewBurnEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    account: string;
    amount: BigNumber;
  }
>;

export type NewBurnLimitEvent = TypedEvent<
  [string, BigNumber] & { token: string; limit: BigNumber }
>;

export type NewBurnPeriodEvent = TypedEvent<
  [string, BigNumber] & { token: string; period: BigNumber }
>;

export type NewDexEvent = TypedEvent<[string] & { _dexAddress: string }>;

export type NewDexThresholdEvent = TypedEvent<
  [BigNumber] & { _newThreshold: BigNumber }
>;

export type NewExtraordinaryPeriodEvent = TypedEvent<
  [BigNumber] & { extraordinaryRetrievalProposalPeriod: BigNumber }
>;

export type NewGovernanceContractEvent = TypedEvent<
  [string] & { _newAdr: string }
>;

export type NewMintEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    account: string;
    amount: BigNumber;
  }
>;

export type NewMintLimitEvent = TypedEvent<
  [string, BigNumber] & { token: string; limit: BigNumber }
>;

export type NewMintPeriodEvent = TypedEvent<
  [string, BigNumber] & { token: string; period: BigNumber }
>;

export type NewProtectedAddressEvent = TypedEvent<
  [string, string, string] & {
    _token: string;
    _protectedAddress: string;
    _strategy: string;
  }
>;

export type NewReportingContractEvent = TypedEvent<
  [string] & { _newAdr: string }
>;

export type NewSettlementPeriodProposalEvent = TypedEvent<
  [string, BigNumber] & { _token: string; _seconds: BigNumber }
>;

export type NewSettlementTimelockEvent = TypedEvent<
  [BigNumber] & { _timelock: BigNumber }
>;

export type NewStakingContractEvent = TypedEvent<
  [string] & { _newAdr: string }
>;

export type NewWhitelistedAddressEvent = TypedEvent<
  [string] & { _whitelistAdr: string }
>;

export type PauseAdminChangeEvent = TypedEvent<
  [string] & { _newAdmin: string }
>;

export type RecoveryAdminChangeEvent = TypedEvent<
  [string] & { _newAdmin: string }
>;

export type RemovedProtectedAddressEvent = TypedEvent<
  [string, string] & { _token: string; _protectedAddress: string }
>;

export type SettlementPeriodChangeEvent = TypedEvent<
  [string, BigNumber] & {
    _token: string;
    _proposedTokenLockTimeframe: BigNumber;
  }
>;

export type WhitelistedAddressRemovalEvent = TypedEvent<
  [string] & { _whitelistAdr: string }
>;

export class ILssController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILssControllerInterface;

  functions: {
    activateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToBlacklist(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    afterTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeApprove(
      _sender: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeBurn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeDecreaseAllowance(
      _msgSender: string,
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeIncreaseAllowance(
      _msgSender: string,
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeTransferFrom(
      _msgSender: string,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklist(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    deactivateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexList(
      _dexAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeNewSettlementPeriod(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extraordinaryRetrieval(
      _token: string,
      addresses: string[],
      fundsToRetrieve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extraordinaryRetrievalProposalPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    losslessGovernance(overrides?: CallOverrides): Promise<[string]>;

    losslessReporting(overrides?: CallOverrides): Promise<[string]>;

    losslessStaking(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseAdmin(overrides?: CallOverrides): Promise<[string]>;

    proposeNewSettlementPeriod(
      _token: string,
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<[string]>;

    removeProtectedAddress(
      _token: string,
      _protectedAddresss: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolvedNegatively(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveBlacklistedFunds(
      _addresses: string[],
      _token: string,
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDexList(
      _dexList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDexTransferThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraordinaryRetrievalPeriod(
      _newPEriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernanceContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauseAdmin(
      _newPauseAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtectedAddress(
      _token: string,
      _protectedAddress: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryAdmin(
      _newRecoveryAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReportingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettlementTimeLock(
      _newTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenBurnLimit(
      _token: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenBurnPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintLimit(
      _token: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMintPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _addrList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementTimeLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(_adr: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  activateEmergency(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToBlacklist(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  afterTransfer(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeApprove(
    _sender: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeBurn(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeDecreaseAllowance(
    _msgSender: string,
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeIncreaseAllowance(
    _msgSender: string,
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeMint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeTransfer(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeTransferFrom(
    _msgSender: string,
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklist(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  deactivateEmergency(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexList(
    _dexAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  executeNewSettlementPeriod(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extraordinaryRetrieval(
    _token: string,
    addresses: string[],
    fundsToRetrieve: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extraordinaryRetrievalProposalPeriod(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  losslessGovernance(overrides?: CallOverrides): Promise<string>;

  losslessReporting(overrides?: CallOverrides): Promise<string>;

  losslessStaking(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseAdmin(overrides?: CallOverrides): Promise<string>;

  proposeNewSettlementPeriod(
    _token: string,
    _seconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoveryAdmin(overrides?: CallOverrides): Promise<string>;

  removeProtectedAddress(
    _token: string,
    _protectedAddresss: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolvedNegatively(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveBlacklistedFunds(
    _addresses: string[],
    _token: string,
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDexList(
    _dexList: string[],
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDexTransferThreshold(
    _newThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraordinaryRetrievalPeriod(
    _newPEriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernanceContractAddress(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuardian(
    _newGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauseAdmin(
    _newPauseAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtectedAddress(
    _token: string,
    _protectedAddress: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryAdmin(
    _newRecoveryAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReportingContractAddress(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettlementTimeLock(
    _newTimelock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingContractAddress(
    _adr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenBurnLimit(
    _token: string,
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenBurnPeriod(
    _token: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintLimit(
    _token: string,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMintPeriod(
    _token: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _addrList: string[],
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(_adr: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    activateEmergency(_token: string, overrides?: CallOverrides): Promise<void>;

    addToBlacklist(_adr: string, overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    afterTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeApprove(
      _sender: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeBurn(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeDecreaseAllowance(
      _msgSender: string,
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeIncreaseAllowance(
      _msgSender: string,
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransferFrom(
      _msgSender: string,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklist(_adr: string, overrides?: CallOverrides): Promise<boolean>;

    deactivateEmergency(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dexList(_dexAddress: string, overrides?: CallOverrides): Promise<boolean>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    executeNewSettlementPeriod(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    extraordinaryRetrieval(
      _token: string,
      addresses: string[],
      fundsToRetrieve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extraordinaryRetrievalProposalPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    losslessGovernance(overrides?: CallOverrides): Promise<string>;

    losslessReporting(overrides?: CallOverrides): Promise<string>;

    losslessStaking(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseAdmin(overrides?: CallOverrides): Promise<string>;

    proposeNewSettlementPeriod(
      _token: string,
      _seconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoveryAdmin(overrides?: CallOverrides): Promise<string>;

    removeProtectedAddress(
      _token: string,
      _protectedAddresss: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolvedNegatively(_adr: string, overrides?: CallOverrides): Promise<void>;

    retrieveBlacklistedFunds(
      _addresses: string[],
      _token: string,
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setDexList(
      _dexList: string[],
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexTransferThreshold(
      _newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraordinaryRetrievalPeriod(
      _newPEriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceContractAddress(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuardian(_newGuardian: string, overrides?: CallOverrides): Promise<void>;

    setPauseAdmin(
      _newPauseAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtectedAddress(
      _token: string,
      _protectedAddress: string,
      _strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoveryAdmin(
      _newRecoveryAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportingContractAddress(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementTimeLock(
      _newTimelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContractAddress(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenBurnLimit(
      _token: string,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenBurnPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMintLimit(
      _token: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMintPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _addrList: string[],
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whitelist(_adr: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AccountBlacklistRemoval(address)"(
      _adr?: string | null
    ): TypedEventFilter<[string], { _adr: string }>;

    AccountBlacklistRemoval(
      _adr?: string | null
    ): TypedEventFilter<[string], { _adr: string }>;

    "AdminChange(address)"(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    AdminChange(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    "DexRemoval(address)"(
      _dexAddress?: string | null
    ): TypedEventFilter<[string], { _dexAddress: string }>;

    DexRemoval(
      _dexAddress?: string | null
    ): TypedEventFilter<[string], { _dexAddress: string }>;

    "EmergencyActive(address)"(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    EmergencyActive(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    "EmergencyDeactivation(address)"(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    EmergencyDeactivation(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    "GuardianSet(address,address)"(
      _oldGuardian?: string | null,
      _newGuardian?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldGuardian: string; _newGuardian: string }
    >;

    GuardianSet(
      _oldGuardian?: string | null,
      _newGuardian?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldGuardian: string; _newGuardian: string }
    >;

    "NewBlacklistedAddress(address)"(
      _blacklistedAddres?: string | null
    ): TypedEventFilter<[string], { _blacklistedAddres: string }>;

    NewBlacklistedAddress(
      _blacklistedAddres?: string | null
    ): TypedEventFilter<[string], { _blacklistedAddres: string }>;

    "NewBurn(address,address,uint256)"(
      token?: string | null,
      account?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    NewBurn(
      token?: string | null,
      account?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    "NewBurnLimit(address,uint256)"(
      token?: string | null,
      limit?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; limit: BigNumber }
    >;

    NewBurnLimit(
      token?: string | null,
      limit?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; limit: BigNumber }
    >;

    "NewBurnPeriod(address,uint256)"(
      token?: string | null,
      period?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; period: BigNumber }
    >;

    NewBurnPeriod(
      token?: string | null,
      period?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; period: BigNumber }
    >;

    "NewDex(address)"(
      _dexAddress?: string | null
    ): TypedEventFilter<[string], { _dexAddress: string }>;

    NewDex(
      _dexAddress?: string | null
    ): TypedEventFilter<[string], { _dexAddress: string }>;

    "NewDexThreshold(uint256)"(
      _newThreshold?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newThreshold: BigNumber }>;

    NewDexThreshold(
      _newThreshold?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newThreshold: BigNumber }>;

    "NewExtraordinaryPeriod(uint256)"(
      extraordinaryRetrievalProposalPeriod?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber],
      { extraordinaryRetrievalProposalPeriod: BigNumber }
    >;

    NewExtraordinaryPeriod(
      extraordinaryRetrievalProposalPeriod?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber],
      { extraordinaryRetrievalProposalPeriod: BigNumber }
    >;

    "NewGovernanceContract(address)"(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    NewGovernanceContract(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    "NewMint(address,address,uint256)"(
      token?: string | null,
      account?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    NewMint(
      token?: string | null,
      account?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; amount: BigNumber }
    >;

    "NewMintLimit(address,uint256)"(
      token?: string | null,
      limit?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; limit: BigNumber }
    >;

    NewMintLimit(
      token?: string | null,
      limit?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; limit: BigNumber }
    >;

    "NewMintPeriod(address,uint256)"(
      token?: string | null,
      period?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; period: BigNumber }
    >;

    NewMintPeriod(
      token?: string | null,
      period?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; period: BigNumber }
    >;

    "NewProtectedAddress(address,address,address)"(
      _token?: string | null,
      _protectedAddress?: string | null,
      _strategy?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _token: string; _protectedAddress: string; _strategy: string }
    >;

    NewProtectedAddress(
      _token?: string | null,
      _protectedAddress?: string | null,
      _strategy?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _token: string; _protectedAddress: string; _strategy: string }
    >;

    "NewReportingContract(address)"(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    NewReportingContract(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    "NewSettlementPeriodProposal(address,uint256)"(
      _token?: string | null,
      _seconds?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _seconds: BigNumber }
    >;

    NewSettlementPeriodProposal(
      _token?: string | null,
      _seconds?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _seconds: BigNumber }
    >;

    "NewSettlementTimelock(uint256)"(
      _timelock?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _timelock: BigNumber }>;

    NewSettlementTimelock(
      _timelock?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _timelock: BigNumber }>;

    "NewStakingContract(address)"(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    NewStakingContract(
      _newAdr?: string | null
    ): TypedEventFilter<[string], { _newAdr: string }>;

    "NewWhitelistedAddress(address)"(
      _whitelistAdr?: string | null
    ): TypedEventFilter<[string], { _whitelistAdr: string }>;

    NewWhitelistedAddress(
      _whitelistAdr?: string | null
    ): TypedEventFilter<[string], { _whitelistAdr: string }>;

    "PauseAdminChange(address)"(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    PauseAdminChange(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    "RecoveryAdminChange(address)"(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    RecoveryAdminChange(
      _newAdmin?: string | null
    ): TypedEventFilter<[string], { _newAdmin: string }>;

    "RemovedProtectedAddress(address,address)"(
      _token?: string | null,
      _protectedAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { _token: string; _protectedAddress: string }
    >;

    RemovedProtectedAddress(
      _token?: string | null,
      _protectedAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { _token: string; _protectedAddress: string }
    >;

    "SettlementPeriodChange(address,uint256)"(
      _token?: string | null,
      _proposedTokenLockTimeframe?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _proposedTokenLockTimeframe: BigNumber }
    >;

    SettlementPeriodChange(
      _token?: string | null,
      _proposedTokenLockTimeframe?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _proposedTokenLockTimeframe: BigNumber }
    >;

    "WhitelistedAddressRemoval(address)"(
      _whitelistAdr?: string | null
    ): TypedEventFilter<[string], { _whitelistAdr: string }>;

    WhitelistedAddressRemoval(
      _whitelistAdr?: string | null
    ): TypedEventFilter<[string], { _whitelistAdr: string }>;
  };

  estimateGas: {
    activateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToBlacklist(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    afterTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeApprove(
      _sender: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeBurn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeDecreaseAllowance(
      _msgSender: string,
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeIncreaseAllowance(
      _msgSender: string,
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeTransferFrom(
      _msgSender: string,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklist(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexList(
      _dexAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    executeNewSettlementPeriod(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extraordinaryRetrieval(
      _token: string,
      addresses: string[],
      fundsToRetrieve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extraordinaryRetrievalProposalPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    losslessGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    losslessReporting(overrides?: CallOverrides): Promise<BigNumber>;

    losslessStaking(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewSettlementPeriod(
      _token: string,
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoveryAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    removeProtectedAddress(
      _token: string,
      _protectedAddresss: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolvedNegatively(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveBlacklistedFunds(
      _addresses: string[],
      _token: string,
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDexList(
      _dexList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDexTransferThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraordinaryRetrievalPeriod(
      _newPEriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernanceContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauseAdmin(
      _newPauseAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtectedAddress(
      _token: string,
      _protectedAddress: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryAdmin(
      _newRecoveryAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReportingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettlementTimeLock(
      _newTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenBurnLimit(
      _token: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenBurnPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintLimit(
      _token: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMintPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _addrList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToBlacklist(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    afterTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeApprove(
      _sender: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeBurn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeDecreaseAllowance(
      _msgSender: string,
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeIncreaseAllowance(
      _msgSender: string,
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeMint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransfer(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransferFrom(
      _msgSender: string,
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklist(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergency(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexList(
      _dexAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexTranferThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeNewSettlementPeriod(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extraordinaryRetrieval(
      _token: string,
      addresses: string[],
      fundsToRetrieve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extraordinaryRetrievalProposalPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessReporting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeNewSettlementPeriod(
      _token: string,
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProtectedAddress(
      _token: string,
      _protectedAddresss: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolvedNegatively(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveBlacklistedFunds(
      _addresses: string[],
      _token: string,
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDexList(
      _dexList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDexTransferThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraordinaryRetrievalPeriod(
      _newPEriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauseAdmin(
      _newPauseAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtectedAddress(
      _token: string,
      _protectedAddress: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryAdmin(
      _newRecoveryAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReportingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettlementTimeLock(
      _newTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContractAddress(
      _adr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenBurnLimit(
      _token: string,
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenBurnPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintLimit(
      _token: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMintPeriod(
      _token: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _addrList: string[],
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementTimeLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      _adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
