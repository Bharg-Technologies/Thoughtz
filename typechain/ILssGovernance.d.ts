/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILssGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "COMMITEE_INDEX()": FunctionFragment;
    "LSS_TEAM_INDEX()": FunctionFragment;
    "TOKEN_OWNER_INDEX()": FunctionFragment;
    "addCommitteeMembers(address[])": FunctionFragment;
    "claimCommitteeReward(uint256)": FunctionFragment;
    "committeeMemberVote(uint256,bool)": FunctionFragment;
    "committeeMembersCount()": FunctionFragment;
    "extaordinaryRetrieval(address[],address)": FunctionFragment;
    "getAmountReported(uint256)": FunctionFragment;
    "getIsVoted(uint256,uint256)": FunctionFragment;
    "getVote(uint256,uint256)": FunctionFragment;
    "isCommitteeMember(address)": FunctionFragment;
    "isReportSolved(uint256)": FunctionFragment;
    "losslessClaim(uint256)": FunctionFragment;
    "losslessController()": FunctionFragment;
    "losslessReporting()": FunctionFragment;
    "losslessStaking()": FunctionFragment;
    "losslessVote(uint256,bool)": FunctionFragment;
    "proposeWallet(uint256,address)": FunctionFragment;
    "rejectWallet(uint256)": FunctionFragment;
    "removeCommitteeMembers(address[])": FunctionFragment;
    "reportResolution(uint256)": FunctionFragment;
    "resolveReport(uint256)": FunctionFragment;
    "retrieveCompensation()": FunctionFragment;
    "retrieveFunds(uint256)": FunctionFragment;
    "setCompensationAmount(uint256)": FunctionFragment;
    "setDisputePeriod(uint256)": FunctionFragment;
    "tokenOwnersVote(uint256,bool)": FunctionFragment;
    "walletDisputePeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMMITEE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LSS_TEAM_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_OWNER_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCommitteeMembers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCommitteeReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "committeeMemberVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "committeeMembersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extaordinaryRetrieval",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountReported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsVoted",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCommitteeMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReportSolved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "losslessClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "losslessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReporting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWallet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCommitteeMembers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reportResolution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveCompensation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompensationAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnersVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "walletDisputePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMITEE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LSS_TEAM_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_OWNER_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCommitteeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCommitteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeMemberVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extaordinaryRetrieval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountReported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIsVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCommitteeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReportSolved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCommitteeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompensationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnersVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletDisputePeriod",
    data: BytesLike
  ): Result;

  events: {
    "CommitteeMajorityReach(uint256,bool)": EventFragment;
    "CommitteeMemberClaim(uint256,address,uint256)": EventFragment;
    "CommitteeMemberNegativeVote(uint256,address)": EventFragment;
    "CommitteeMemberPositiveVote(uint256,address)": EventFragment;
    "CommitteeMembersRemoval(address[])": EventFragment;
    "CompensationRetrieval(address,uint256)": EventFragment;
    "ExtraordinaryProposalAccept(address)": EventFragment;
    "FundsRetrieval(uint256,uint256)": EventFragment;
    "LosslessClaim(address,uint256,uint256)": EventFragment;
    "LosslessTeamNegativeVote(uint256)": EventFragment;
    "LosslessTeamPositiveVote(uint256)": EventFragment;
    "NewCommitteeMembers(address[])": EventFragment;
    "NewDisputePeriod(uint256)": EventFragment;
    "ReportResolve(uint256,bool)": EventFragment;
    "TokenOwnersNegativeVote(uint256)": EventFragment;
    "TokenOwnersPositiveVote(uint256)": EventFragment;
    "WalletProposal(uint256,address)": EventFragment;
    "WalletRejection(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitteeMajorityReach"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMemberClaim"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommitteeMemberNegativeVote"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommitteeMemberPositiveVote"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMembersRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompensationRetrieval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExtraordinaryProposalAccept"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRetrieval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTeamNegativeVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTeamPositiveVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCommitteeMembers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDisputePeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportResolve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOwnersNegativeVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOwnersPositiveVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletRejection"): EventFragment;
}

export type CommitteeMajorityReachEvent = TypedEvent<
  [BigNumber, boolean] & { _reportId: BigNumber; _result: boolean }
>;

export type CommitteeMemberClaimEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    _reportId: BigNumber;
    _member: string;
    _amount: BigNumber;
  }
>;

export type CommitteeMemberNegativeVoteEvent = TypedEvent<
  [BigNumber, string] & { _reportId: BigNumber; _member: string }
>;

export type CommitteeMemberPositiveVoteEvent = TypedEvent<
  [BigNumber, string] & { _reportId: BigNumber; _member: string }
>;

export type CommitteeMembersRemovalEvent = TypedEvent<
  [string[]] & { _members: string[] }
>;

export type CompensationRetrievalEvent = TypedEvent<
  [string, BigNumber] & { _wallet: string; _amount: BigNumber }
>;

export type ExtraordinaryProposalAcceptEvent = TypedEvent<
  [string] & { _token: string }
>;

export type FundsRetrievalEvent = TypedEvent<
  [BigNumber, BigNumber] & { _reportId: BigNumber; _amount: BigNumber }
>;

export type LosslessClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _token: string;
    _reportID: BigNumber;
    _amount: BigNumber;
  }
>;

export type LosslessTeamNegativeVoteEvent = TypedEvent<
  [BigNumber] & { _reportId: BigNumber }
>;

export type LosslessTeamPositiveVoteEvent = TypedEvent<
  [BigNumber] & { _reportId: BigNumber }
>;

export type NewCommitteeMembersEvent = TypedEvent<
  [string[]] & { _members: string[] }
>;

export type NewDisputePeriodEvent = TypedEvent<
  [BigNumber] & { _newPeriod: BigNumber }
>;

export type ReportResolveEvent = TypedEvent<
  [BigNumber, boolean] & { _reportId: BigNumber; _resolution: boolean }
>;

export type TokenOwnersNegativeVoteEvent = TypedEvent<
  [BigNumber] & { _reportId: BigNumber }
>;

export type TokenOwnersPositiveVoteEvent = TypedEvent<
  [BigNumber] & { _reportId: BigNumber }
>;

export type WalletProposalEvent = TypedEvent<
  [BigNumber, string] & { _reportId: BigNumber; _wallet: string }
>;

export type WalletRejectionEvent = TypedEvent<
  [BigNumber] & { _reportId: BigNumber }
>;

export class ILssGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILssGovernanceInterface;

  functions: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCommitteeReward(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    committeeMemberVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    committeeMembersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    extaordinaryRetrieval(
      _address: string[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountReported(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsVoted(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getVote(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCommitteeMember(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReportSolved(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    losslessClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    losslessController(overrides?: CallOverrides): Promise<[string]>;

    losslessReporting(overrides?: CallOverrides): Promise<[string]>;

    losslessStaking(overrides?: CallOverrides): Promise<[string]>;

    losslessVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeWallet(
      _reportId: BigNumberish,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectWallet(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportResolution(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    resolveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveCompensation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveFunds(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompensationAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisputePeriod(
      _timeFrame: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOwnersVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  addCommitteeMembers(
    _members: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCommitteeReward(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  committeeMemberVote(
    _reportId: BigNumberish,
    _vote: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

  extaordinaryRetrieval(
    _address: string[],
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountReported(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsVoted(
    _reportId: BigNumberish,
    _voterIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVote(
    _reportId: BigNumberish,
    _voterIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCommitteeMember(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReportSolved(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  losslessClaim(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  losslessController(overrides?: CallOverrides): Promise<string>;

  losslessReporting(overrides?: CallOverrides): Promise<string>;

  losslessStaking(overrides?: CallOverrides): Promise<string>;

  losslessVote(
    _reportId: BigNumberish,
    _vote: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeWallet(
    _reportId: BigNumberish,
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectWallet(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCommitteeMembers(
    _members: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportResolution(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  resolveReport(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveCompensation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveFunds(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompensationAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisputePeriod(
    _timeFrame: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOwnersVote(
    _reportId: BigNumberish,
    _vote: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addCommitteeMembers(
      _members: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimCommitteeReward(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    committeeMemberVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    extaordinaryRetrieval(
      _address: string[],
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountReported(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsVoted(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVote(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCommitteeMember(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReportSolved(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    losslessClaim(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    losslessController(overrides?: CallOverrides): Promise<string>;

    losslessReporting(overrides?: CallOverrides): Promise<string>;

    losslessStaking(overrides?: CallOverrides): Promise<string>;

    losslessVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeWallet(
      _reportId: BigNumberish,
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectWallet(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCommitteeMembers(
      _members: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    reportResolution(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    resolveReport(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveCompensation(overrides?: CallOverrides): Promise<void>;

    retrieveFunds(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompensationAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputePeriod(
      _timeFrame: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnersVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CommitteeMajorityReach(uint256,bool)"(
      _reportId?: BigNumberish | null,
      _result?: boolean | null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _reportId: BigNumber; _result: boolean }
    >;

    CommitteeMajorityReach(
      _reportId?: BigNumberish | null,
      _result?: boolean | null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _reportId: BigNumber; _result: boolean }
    >;

    "CommitteeMemberClaim(uint256,address,uint256)"(
      _reportId?: BigNumberish | null,
      _member?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _reportId: BigNumber; _member: string; _amount: BigNumber }
    >;

    CommitteeMemberClaim(
      _reportId?: BigNumberish | null,
      _member?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _reportId: BigNumber; _member: string; _amount: BigNumber }
    >;

    "CommitteeMemberNegativeVote(uint256,address)"(
      _reportId?: BigNumberish | null,
      _member?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _member: string }
    >;

    CommitteeMemberNegativeVote(
      _reportId?: BigNumberish | null,
      _member?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _member: string }
    >;

    "CommitteeMemberPositiveVote(uint256,address)"(
      _reportId?: BigNumberish | null,
      _member?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _member: string }
    >;

    CommitteeMemberPositiveVote(
      _reportId?: BigNumberish | null,
      _member?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _member: string }
    >;

    "CommitteeMembersRemoval(address[])"(
      _members?: null
    ): TypedEventFilter<[string[]], { _members: string[] }>;

    CommitteeMembersRemoval(
      _members?: null
    ): TypedEventFilter<[string[]], { _members: string[] }>;

    "CompensationRetrieval(address,uint256)"(
      _wallet?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _wallet: string; _amount: BigNumber }
    >;

    CompensationRetrieval(
      _wallet?: string | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _wallet: string; _amount: BigNumber }
    >;

    "ExtraordinaryProposalAccept(address)"(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    ExtraordinaryProposalAccept(
      _token?: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    "FundsRetrieval(uint256,uint256)"(
      _reportId?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _reportId: BigNumber; _amount: BigNumber }
    >;

    FundsRetrieval(
      _reportId?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _reportId: BigNumber; _amount: BigNumber }
    >;

    "LosslessClaim(address,uint256,uint256)"(
      _token?: string | null,
      _reportID?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _token: string; _reportID: BigNumber; _amount: BigNumber }
    >;

    LosslessClaim(
      _token?: string | null,
      _reportID?: BigNumberish | null,
      _amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _token: string; _reportID: BigNumber; _amount: BigNumber }
    >;

    "LosslessTeamNegativeVote(uint256)"(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    LosslessTeamNegativeVote(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    "LosslessTeamPositiveVote(uint256)"(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    LosslessTeamPositiveVote(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    "NewCommitteeMembers(address[])"(
      _members?: null
    ): TypedEventFilter<[string[]], { _members: string[] }>;

    NewCommitteeMembers(
      _members?: null
    ): TypedEventFilter<[string[]], { _members: string[] }>;

    "NewDisputePeriod(uint256)"(
      _newPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newPeriod: BigNumber }>;

    NewDisputePeriod(
      _newPeriod?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newPeriod: BigNumber }>;

    "ReportResolve(uint256,bool)"(
      _reportId?: BigNumberish | null,
      _resolution?: boolean | null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _reportId: BigNumber; _resolution: boolean }
    >;

    ReportResolve(
      _reportId?: BigNumberish | null,
      _resolution?: boolean | null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { _reportId: BigNumber; _resolution: boolean }
    >;

    "TokenOwnersNegativeVote(uint256)"(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    TokenOwnersNegativeVote(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    "TokenOwnersPositiveVote(uint256)"(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    TokenOwnersPositiveVote(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    "WalletProposal(uint256,address)"(
      _reportId?: BigNumberish | null,
      _wallet?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _wallet: string }
    >;

    WalletProposal(
      _reportId?: BigNumberish | null,
      _wallet?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { _reportId: BigNumber; _wallet: string }
    >;

    "WalletRejection(uint256)"(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;

    WalletRejection(
      _reportId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _reportId: BigNumber }>;
  };

  estimateGas: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCommitteeReward(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    committeeMemberVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    extaordinaryRetrieval(
      _address: string[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountReported(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsVoted(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCommitteeMember(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReportSolved(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    losslessClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    losslessController(overrides?: CallOverrides): Promise<BigNumber>;

    losslessReporting(overrides?: CallOverrides): Promise<BigNumber>;

    losslessStaking(overrides?: CallOverrides): Promise<BigNumber>;

    losslessVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeWallet(
      _reportId: BigNumberish,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectWallet(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportResolution(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveCompensation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveFunds(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompensationAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisputePeriod(
      _timeFrame: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOwnersVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCommitteeReward(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    committeeMemberVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    committeeMembersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extaordinaryRetrieval(
      _address: string[],
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountReported(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsVoted(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _reportId: BigNumberish,
      _voterIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCommitteeMember(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReportSolved(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    losslessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessReporting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeWallet(
      _reportId: BigNumberish,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectWallet(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCommitteeMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportResolution(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveCompensation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFunds(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompensationAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisputePeriod(
      _timeFrame: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOwnersVote(
      _reportId: BigNumberish,
      _vote: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    walletDisputePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
