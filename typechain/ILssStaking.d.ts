/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILssStakingInterface extends ethers.utils.Interface {
  functions: {
    "getIsAccountStaked(uint256,address)": FunctionFragment;
    "getStakerCoefficient(uint256,address)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "losslessController()": FunctionFragment;
    "losslessGovernance()": FunctionFragment;
    "losslessReporting()": FunctionFragment;
    "pause()": FunctionFragment;
    "reportCoefficient(uint256)": FunctionFragment;
    "setLosslessGovernance(address)": FunctionFragment;
    "setLssReporting(address)": FunctionFragment;
    "setStakingAmount(uint256)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakerClaim(uint256)": FunctionFragment;
    "stakerClaimableAmount(uint256)": FunctionFragment;
    "stakingAmount()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getIsAccountStaked",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerCoefficient",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReporting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reportCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLssReporting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakerClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerClaimableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getIsAccountStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "losslessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLssReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "NewGovernanceContract(address)": EventFragment;
    "NewReportingContract(address)": EventFragment;
    "NewStake(address,address,uint256)": EventFragment;
    "NewStakingAmount(uint256)": EventFragment;
    "NewStakingToken(address)": EventFragment;
    "StakerClaim(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewGovernanceContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportingContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerClaim"): EventFragment;
}

export type NewGovernanceContractEvent = TypedEvent<
  [string] & { _newContract: string }
>;

export type NewReportingContractEvent = TypedEvent<
  [string] & { _newContract: string }
>;

export type NewStakeEvent = TypedEvent<
  [string, string, BigNumber] & {
    _token: string;
    _account: string;
    _reportId: BigNumber;
  }
>;

export type NewStakingAmountEvent = TypedEvent<
  [BigNumber] & { _newAmount: BigNumber }
>;

export type NewStakingTokenEvent = TypedEvent<[string] & { _newToken: string }>;

export type StakerClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    _staker: string;
    _token: string;
    _reportID: BigNumber;
    _amount: BigNumber;
  }
>;

export class ILssStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILssStakingInterface;

  functions: {
    getIsAccountStaked(
      _reportId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getStakerCoefficient(
      _reportId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    losslessController(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    losslessGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    losslessReporting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportCoefficient(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLssReporting(
      _losslessReporting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingAmount(
      _stakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getIsAccountStaked(
    _reportId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getStakerCoefficient(
    _reportId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  losslessController(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  losslessGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  losslessReporting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportCoefficient(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setLosslessGovernance(
    _losslessGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLssReporting(
    _losslessReporting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingAmount(
    _stakingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerClaim(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerClaimableAmount(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingAmount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getIsAccountStaked(
      _reportId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getStakerCoefficient(
      _reportId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    losslessController(overrides?: CallOverrides): Promise<string>;

    losslessGovernance(overrides?: CallOverrides): Promise<string>;

    losslessReporting(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    reportCoefficient(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLssReporting(
      _losslessReporting: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingAmount(
      _stakingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_reportId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakerClaim(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewGovernanceContract(address)"(
      _newContract?: string | null
    ): TypedEventFilter<[string], { _newContract: string }>;

    NewGovernanceContract(
      _newContract?: string | null
    ): TypedEventFilter<[string], { _newContract: string }>;

    "NewReportingContract(address)"(
      _newContract?: string | null
    ): TypedEventFilter<[string], { _newContract: string }>;

    NewReportingContract(
      _newContract?: string | null
    ): TypedEventFilter<[string], { _newContract: string }>;

    "NewStake(address,address,uint256)"(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    NewStake(
      _token?: string | null,
      _account?: string | null,
      _reportId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _token: string; _account: string; _reportId: BigNumber }
    >;

    "NewStakingAmount(uint256)"(
      _newAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newAmount: BigNumber }>;

    NewStakingAmount(
      _newAmount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _newAmount: BigNumber }>;

    "NewStakingToken(address)"(
      _newToken?: string | null
    ): TypedEventFilter<[string], { _newToken: string }>;

    NewStakingToken(
      _newToken?: string | null
    ): TypedEventFilter<[string], { _newToken: string }>;

    "StakerClaim(address,address,uint256,uint256)"(
      _staker?: string | null,
      _token?: string | null,
      _reportID?: BigNumberish | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _staker: string;
        _token: string;
        _reportID: BigNumber;
        _amount: BigNumber;
      }
    >;

    StakerClaim(
      _staker?: string | null,
      _token?: string | null,
      _reportID?: BigNumberish | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _staker: string;
        _token: string;
        _reportID: BigNumber;
        _amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    getIsAccountStaked(
      _reportId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerCoefficient(
      _reportId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    losslessController(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    losslessGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    losslessReporting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportCoefficient(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLssReporting(
      _losslessReporting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingAmount(
      _stakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getIsAccountStaked(
      _reportId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerCoefficient(
      _reportId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessController(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    losslessGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    losslessReporting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportCoefficient(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLosslessGovernance(
      _losslessGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLssReporting(
      _losslessReporting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingAmount(
      _stakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerClaim(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerClaimableAmount(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingAmount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
