/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AntisnipeInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "UNLOCKER_ROLE()": FunctionFragment;
    "_checkPair(address,address)": FunctionFragment;
    "accBought(address,address)": FunctionFragment;
    "addBlacklist(address,address[])": FunctionFragment;
    "addUnlocker(address)": FunctionFragment;
    "addUserToLockWhitelist(address,address)": FunctionFragment;
    "assureCanTransfer(address,address,address,uint256)": FunctionFragment;
    "bought(address,address)": FunctionFragment;
    "checkPair(address,address)": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "collect(address,address,address[])": FunctionFragment;
    "convert(address,address,address,uint256)": FunctionFragment;
    "createSalt(address)": FunctionFragment;
    "disableLocking(address)": FunctionFragment;
    "getBlacklist(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hash(address,uint256)": FunctionFragment;
    "hashData(address,address,uint256)": FunctionFragment;
    "isDisabled(address)": FunctionFragment;
    "isUserBlacklisted(address,address)": FunctionFragment;
    "lastBuy(address,address)": FunctionFragment;
    "lastSell(address,address)": FunctionFragment;
    "lockWhitelist(address,address)": FunctionFragment;
    "parameters(address)": FunctionFragment;
    "removeBlacklist(address,address[])": FunctionFragment;
    "removeUnlocker(address)": FunctionFragment;
    "removeUserFromLockWhitelist(address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDisable(address,bool)": FunctionFragment;
    "setParameters(address,(address,address,bytes32,uint256,(uint256,uint256,uint256,uint256,uint256,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256),bytes32[]))": FunctionFragment;
    "startTimestamp(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unlock(address,address)": FunctionFragment;
    "unlockByUser(address,uint256,address,bytes)": FunctionFragment;
    "verifyMessage(address,bytes32,bytes)": FunctionFragment;
    "whitelist(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNLOCKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_checkPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "accBought",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlacklist",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "addUnlocker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addUserToLockWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assureCanTransfer",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bought",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createSalt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "disableLocking",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashData",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isDisabled", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isUserBlacklisted",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBuy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSell",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "parameters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeBlacklist",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUnlocker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUserFromLockWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisable",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParameters",
    values: [
      string,
      {
        poolToken: string;
        router: string;
        lp: BytesLike;
        launch: BigNumberish;
        antisnipe: {
          threshold: BigNumberish;
          buyLimit: BigNumberish;
          sellLimit: BigNumberish;
          buyDelay: BigNumberish;
          sellDelay: BigNumberish;
          blacklist: boolean;
        };
        lock: {
          rateX1000: BigNumberish;
          unit: BigNumberish;
          threshold: BigNumberish;
          unlockPeriod: BigNumberish;
          unlockX1000: BigNumberish;
        };
        blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
        whitelists: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockByUser",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMessage",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNLOCKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_checkPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accBought", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUnlocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUserToLockWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assureCanTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bought", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSalt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableLocking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDisabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastSell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUnlocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUserFromLockWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDisable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class Antisnipe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AntisnipeInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNLOCKER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPair: boolean }>;

    accBought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUserToLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assureCanTransfer(
      sender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isPair: boolean }>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collect(
      token: string,
      to: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createSalt(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableLocking(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlacklist(token: string, overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hash(
      user: string,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashData(
      user: string,
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDisabled(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isUserBlacklisted(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastBuy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSell(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockWhitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    parameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
          threshold: BigNumber;
          buyLimit: BigNumber;
          sellLimit: BigNumber;
          buyDelay: BigNumber;
          sellDelay: BigNumber;
          blacklist: boolean;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rateX1000: BigNumber;
          unit: BigNumber;
          threshold: BigNumber;
          unlockPeriod: BigNumber;
          unlockX1000: BigNumber;
        },
        [BigNumber, BigNumber] & {
          threshold: BigNumber;
          collectPeriod: BigNumber;
        }
      ] & {
        register: boolean;
        token: string;
        poolToken: string;
        router: string;
        pair: string;
        lp: string;
        launch: BigNumber;
        salt: BigNumber;
        antisnipe: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          threshold: BigNumber;
          buyLimit: BigNumber;
          sellLimit: BigNumber;
          buyDelay: BigNumber;
          sellDelay: BigNumber;
          blacklist: boolean;
        };
        lock: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rateX1000: BigNumber;
          unit: BigNumber;
          threshold: BigNumber;
          unlockPeriod: BigNumber;
          unlockX1000: BigNumber;
        };
        blacklist: [BigNumber, BigNumber] & {
          threshold: BigNumber;
          collectPeriod: BigNumber;
        };
      }
    >;

    removeBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeUserFromLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisable(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParameters(
      token: string,
      params: {
        poolToken: string;
        router: string;
        lp: BytesLike;
        launch: BigNumberish;
        antisnipe: {
          threshold: BigNumberish;
          buyLimit: BigNumberish;
          sellLimit: BigNumberish;
          buyDelay: BigNumberish;
          sellDelay: BigNumberish;
          blacklist: boolean;
        };
        lock: {
          rateX1000: BigNumberish;
          unit: BigNumberish;
          threshold: BigNumberish;
          unlockPeriod: BigNumberish;
          unlockX1000: BigNumberish;
        };
        blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
        whitelists: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlock(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockByUser(
      token: string,
      timestamp: BigNumberish,
      unlocker: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMessage(
      signer: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelist(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  UNLOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

  _checkPair(
    token: string,
    possiblyPair: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  accBought(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addBlacklist(
    token: string,
    users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUnlocker(
    unlocker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUserToLockWhitelist(
    token: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assureCanTransfer(
    sender: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bought(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkPair(
    token: string,
    possiblyPair: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collect(
    token: string,
    to: string,
    users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convert(
    router: string,
    token0: string,
    token1: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createSalt(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableLocking(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlacklist(token: string, overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hash(
    user: string,
    salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hashData(
    user: string,
    token: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isDisabled(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isUserBlacklisted(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastBuy(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSell(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockWhitelist(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parameters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        threshold: BigNumber;
        buyLimit: BigNumber;
        sellLimit: BigNumber;
        buyDelay: BigNumber;
        sellDelay: BigNumber;
        blacklist: boolean;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rateX1000: BigNumber;
        unit: BigNumber;
        threshold: BigNumber;
        unlockPeriod: BigNumber;
        unlockX1000: BigNumber;
      },
      [BigNumber, BigNumber] & {
        threshold: BigNumber;
        collectPeriod: BigNumber;
      }
    ] & {
      register: boolean;
      token: string;
      poolToken: string;
      router: string;
      pair: string;
      lp: string;
      launch: BigNumber;
      salt: BigNumber;
      antisnipe: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        threshold: BigNumber;
        buyLimit: BigNumber;
        sellLimit: BigNumber;
        buyDelay: BigNumber;
        sellDelay: BigNumber;
        blacklist: boolean;
      };
      lock: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rateX1000: BigNumber;
        unit: BigNumber;
        threshold: BigNumber;
        unlockPeriod: BigNumber;
        unlockX1000: BigNumber;
      };
      blacklist: [BigNumber, BigNumber] & {
        threshold: BigNumber;
        collectPeriod: BigNumber;
      };
    }
  >;

  removeBlacklist(
    token: string,
    users: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUnlocker(
    unlocker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeUserFromLockWhitelist(
    token: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisable(
    token: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParameters(
    token: string,
    params: {
      poolToken: string;
      router: string;
      lp: BytesLike;
      launch: BigNumberish;
      antisnipe: {
        threshold: BigNumberish;
        buyLimit: BigNumberish;
        sellLimit: BigNumberish;
        buyDelay: BigNumberish;
        sellDelay: BigNumberish;
        blacklist: boolean;
      };
      lock: {
        rateX1000: BigNumberish;
        unit: BigNumberish;
        threshold: BigNumberish;
        unlockPeriod: BigNumberish;
        unlockX1000: BigNumberish;
      };
      blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
      whitelists: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlock(
    token: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockByUser(
    token: string,
    timestamp: BigNumberish,
    unlocker: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMessage(
    signer: string,
    data: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelist(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    UNLOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

    _checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accBought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBlacklist(
      token: string,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addUnlocker(unlocker: string, overrides?: CallOverrides): Promise<void>;

    addUserToLockWhitelist(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assureCanTransfer(
      sender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      token: string,
      to: string,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSalt(token: string, overrides?: CallOverrides): Promise<void>;

    disableLocking(token: string, overrides?: CallOverrides): Promise<void>;

    getBlacklist(token: string, overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hash(
      user: string,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hashData(
      user: string,
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isDisabled(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isUserBlacklisted(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastBuy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSell(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockWhitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
          threshold: BigNumber;
          buyLimit: BigNumber;
          sellLimit: BigNumber;
          buyDelay: BigNumber;
          sellDelay: BigNumber;
          blacklist: boolean;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rateX1000: BigNumber;
          unit: BigNumber;
          threshold: BigNumber;
          unlockPeriod: BigNumber;
          unlockX1000: BigNumber;
        },
        [BigNumber, BigNumber] & {
          threshold: BigNumber;
          collectPeriod: BigNumber;
        }
      ] & {
        register: boolean;
        token: string;
        poolToken: string;
        router: string;
        pair: string;
        lp: string;
        launch: BigNumber;
        salt: BigNumber;
        antisnipe: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean
        ] & {
          threshold: BigNumber;
          buyLimit: BigNumber;
          sellLimit: BigNumber;
          buyDelay: BigNumber;
          sellDelay: BigNumber;
          blacklist: boolean;
        };
        lock: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rateX1000: BigNumber;
          unit: BigNumber;
          threshold: BigNumber;
          unlockPeriod: BigNumber;
          unlockX1000: BigNumber;
        };
        blacklist: [BigNumber, BigNumber] & {
          threshold: BigNumber;
          collectPeriod: BigNumber;
        };
      }
    >;

    removeBlacklist(
      token: string,
      users: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeUnlocker(unlocker: string, overrides?: CallOverrides): Promise<void>;

    removeUserFromLockWhitelist(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisable(
      token: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParameters(
      token: string,
      params: {
        poolToken: string;
        router: string;
        lp: BytesLike;
        launch: BigNumberish;
        antisnipe: {
          threshold: BigNumberish;
          buyLimit: BigNumberish;
          sellLimit: BigNumberish;
          buyDelay: BigNumberish;
          sellDelay: BigNumberish;
          blacklist: boolean;
        };
        lock: {
          rateX1000: BigNumberish;
          unit: BigNumberish;
          threshold: BigNumberish;
          unlockPeriod: BigNumberish;
          unlockX1000: BigNumberish;
        };
        blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
        whitelists: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    startTimestamp(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlock(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockByUser(
      token: string,
      timestamp: BigNumberish,
      unlocker: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMessage(
      signer: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelist(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCKER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accBought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUserToLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assureCanTransfer(
      sender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      token: string,
      to: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSalt(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableLocking(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlacklist(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(
      user: string,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashData(
      user: string,
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDisabled(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isUserBlacklisted(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastBuy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSell(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockWhitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeUserFromLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisable(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParameters(
      token: string,
      params: {
        poolToken: string;
        router: string;
        lp: BytesLike;
        launch: BigNumberish;
        antisnipe: {
          threshold: BigNumberish;
          buyLimit: BigNumberish;
          sellLimit: BigNumberish;
          buyDelay: BigNumberish;
          sellDelay: BigNumberish;
          blacklist: boolean;
        };
        lock: {
          rateX1000: BigNumberish;
          unit: BigNumberish;
          threshold: BigNumberish;
          unlockPeriod: BigNumberish;
          unlockX1000: BigNumberish;
        };
        blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
        whitelists: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlock(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockByUser(
      token: string,
      timestamp: BigNumberish,
      unlocker: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMessage(
      signer: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNLOCKER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accBought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUserToLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assureCanTransfer(
      sender: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bought(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPair(
      token: string,
      possiblyPair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      token: string,
      to: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSalt(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableLocking(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlacklist(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      user: string,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashData(
      user: string,
      token: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDisabled(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserBlacklisted(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBuy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSell(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockWhitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBlacklist(
      token: string,
      users: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUnlocker(
      unlocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeUserFromLockWhitelist(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisable(
      token: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParameters(
      token: string,
      params: {
        poolToken: string;
        router: string;
        lp: BytesLike;
        launch: BigNumberish;
        antisnipe: {
          threshold: BigNumberish;
          buyLimit: BigNumberish;
          sellLimit: BigNumberish;
          buyDelay: BigNumberish;
          sellDelay: BigNumberish;
          blacklist: boolean;
        };
        lock: {
          rateX1000: BigNumberish;
          unit: BigNumberish;
          threshold: BigNumberish;
          unlockPeriod: BigNumberish;
          unlockX1000: BigNumberish;
        };
        blacklist: { threshold: BigNumberish; collectPeriod: BigNumberish };
        whitelists: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      token: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockByUser(
      token: string,
      timestamp: BigNumberish,
      unlocker: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMessage(
      signer: string,
      data: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
